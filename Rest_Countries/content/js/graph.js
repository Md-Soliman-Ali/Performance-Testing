/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 558.0, "minX": 0.0, "maxY": 29363.0, "series": [{"data": [[0.0, 558.0], [0.1, 605.0], [0.2, 619.0], [0.3, 619.0], [0.4, 626.0], [0.5, 627.0], [0.6, 632.0], [0.7, 634.0], [0.8, 643.0], [0.9, 652.0], [1.0, 658.0], [1.1, 667.0], [1.2, 671.0], [1.3, 683.0], [1.4, 683.0], [1.5, 707.0], [1.6, 738.0], [1.7, 744.0], [1.8, 752.0], [1.9, 754.0], [2.0, 773.0], [2.1, 782.0], [2.2, 785.0], [2.3, 802.0], [2.4, 853.0], [2.5, 908.0], [2.6, 921.0], [2.7, 925.0], [2.8, 938.0], [2.9, 971.0], [3.0, 978.0], [3.1, 1004.0], [3.2, 1005.0], [3.3, 1013.0], [3.4, 1028.0], [3.5, 1029.0], [3.6, 1035.0], [3.7, 1049.0], [3.8, 1053.0], [3.9, 1059.0], [4.0, 1074.0], [4.1, 1075.0], [4.2, 1083.0], [4.3, 1096.0], [4.4, 1110.0], [4.5, 1123.0], [4.6, 1130.0], [4.7, 1134.0], [4.8, 1144.0], [4.9, 1149.0], [5.0, 1155.0], [5.1, 1157.0], [5.2, 1165.0], [5.3, 1180.0], [5.4, 1194.0], [5.5, 1202.0], [5.6, 1204.0], [5.7, 1206.0], [5.8, 1207.0], [5.9, 1217.0], [6.0, 1218.0], [6.1, 1223.0], [6.2, 1235.0], [6.3, 1237.0], [6.4, 1257.0], [6.5, 1259.0], [6.6, 1259.0], [6.7, 1265.0], [6.8, 1268.0], [6.9, 1274.0], [7.0, 1282.0], [7.1, 1287.0], [7.2, 1287.0], [7.3, 1297.0], [7.4, 1299.0], [7.5, 1301.0], [7.6, 1303.0], [7.7, 1307.0], [7.8, 1325.0], [7.9, 1326.0], [8.0, 1339.0], [8.1, 1341.0], [8.2, 1369.0], [8.3, 1378.0], [8.4, 1380.0], [8.5, 1394.0], [8.6, 1395.0], [8.7, 1410.0], [8.8, 1422.0], [8.9, 1429.0], [9.0, 1431.0], [9.1, 1455.0], [9.2, 1502.0], [9.3, 1521.0], [9.4, 1527.0], [9.5, 1533.0], [9.6, 1544.0], [9.7, 1548.0], [9.8, 1548.0], [9.9, 1553.0], [10.0, 1577.0], [10.1, 1578.0], [10.2, 1589.0], [10.3, 1595.0], [10.4, 1611.0], [10.5, 1615.0], [10.6, 1627.0], [10.7, 1642.0], [10.8, 1644.0], [10.9, 1654.0], [11.0, 1699.0], [11.1, 1704.0], [11.2, 1721.0], [11.3, 1723.0], [11.4, 1762.0], [11.5, 1763.0], [11.6, 1769.0], [11.7, 1786.0], [11.8, 1789.0], [11.9, 1791.0], [12.0, 1802.0], [12.1, 1804.0], [12.2, 1815.0], [12.3, 1816.0], [12.4, 1822.0], [12.5, 1824.0], [12.6, 1824.0], [12.7, 1827.0], [12.8, 1827.0], [12.9, 1845.0], [13.0, 1857.0], [13.1, 1874.0], [13.2, 1881.0], [13.3, 1884.0], [13.4, 1886.0], [13.5, 1893.0], [13.6, 1895.0], [13.7, 1905.0], [13.8, 1923.0], [13.9, 1928.0], [14.0, 1934.0], [14.1, 1935.0], [14.2, 1948.0], [14.3, 1961.0], [14.4, 1966.0], [14.5, 1967.0], [14.6, 1968.0], [14.7, 1969.0], [14.8, 1970.0], [14.9, 1984.0], [15.0, 2003.0], [15.1, 2017.0], [15.2, 2025.0], [15.3, 2031.0], [15.4, 2033.0], [15.5, 2042.0], [15.6, 2045.0], [15.7, 2050.0], [15.8, 2053.0], [15.9, 2064.0], [16.0, 2088.0], [16.1, 2089.0], [16.2, 2092.0], [16.3, 2095.0], [16.4, 2097.0], [16.5, 2097.0], [16.6, 2103.0], [16.7, 2112.0], [16.8, 2121.0], [16.9, 2123.0], [17.0, 2124.0], [17.1, 2126.0], [17.2, 2138.0], [17.3, 2150.0], [17.4, 2168.0], [17.5, 2176.0], [17.6, 2177.0], [17.7, 2178.0], [17.8, 2190.0], [17.9, 2196.0], [18.0, 2199.0], [18.1, 2200.0], [18.2, 2201.0], [18.3, 2202.0], [18.4, 2202.0], [18.5, 2203.0], [18.6, 2226.0], [18.7, 2232.0], [18.8, 2234.0], [18.9, 2235.0], [19.0, 2236.0], [19.1, 2239.0], [19.2, 2259.0], [19.3, 2262.0], [19.4, 2262.0], [19.5, 2265.0], [19.6, 2273.0], [19.7, 2276.0], [19.8, 2277.0], [19.9, 2291.0], [20.0, 2294.0], [20.1, 2298.0], [20.2, 2304.0], [20.3, 2309.0], [20.4, 2314.0], [20.5, 2316.0], [20.6, 2335.0], [20.7, 2342.0], [20.8, 2352.0], [20.9, 2358.0], [21.0, 2359.0], [21.1, 2359.0], [21.2, 2365.0], [21.3, 2385.0], [21.4, 2388.0], [21.5, 2391.0], [21.6, 2403.0], [21.7, 2404.0], [21.8, 2409.0], [21.9, 2448.0], [22.0, 2454.0], [22.1, 2456.0], [22.2, 2475.0], [22.3, 2481.0], [22.4, 2488.0], [22.5, 2493.0], [22.6, 2494.0], [22.7, 2507.0], [22.8, 2509.0], [22.9, 2511.0], [23.0, 2526.0], [23.1, 2537.0], [23.2, 2539.0], [23.3, 2543.0], [23.4, 2545.0], [23.5, 2547.0], [23.6, 2572.0], [23.7, 2572.0], [23.8, 2603.0], [23.9, 2610.0], [24.0, 2611.0], [24.1, 2654.0], [24.2, 2657.0], [24.3, 2658.0], [24.4, 2673.0], [24.5, 2685.0], [24.6, 2689.0], [24.7, 2701.0], [24.8, 2706.0], [24.9, 2715.0], [25.0, 2717.0], [25.1, 2727.0], [25.2, 2730.0], [25.3, 2735.0], [25.4, 2736.0], [25.5, 2737.0], [25.6, 2740.0], [25.7, 2750.0], [25.8, 2764.0], [25.9, 2778.0], [26.0, 2799.0], [26.1, 2802.0], [26.2, 2808.0], [26.3, 2808.0], [26.4, 2808.0], [26.5, 2812.0], [26.6, 2826.0], [26.7, 2832.0], [26.8, 2837.0], [26.9, 2846.0], [27.0, 2860.0], [27.1, 2860.0], [27.2, 2868.0], [27.3, 2892.0], [27.4, 2899.0], [27.5, 2904.0], [27.6, 2913.0], [27.7, 2919.0], [27.8, 2920.0], [27.9, 2921.0], [28.0, 2936.0], [28.1, 2939.0], [28.2, 2941.0], [28.3, 2944.0], [28.4, 2958.0], [28.5, 2960.0], [28.6, 2967.0], [28.7, 2970.0], [28.8, 2972.0], [28.9, 2978.0], [29.0, 2987.0], [29.1, 2989.0], [29.2, 2993.0], [29.3, 2999.0], [29.4, 3002.0], [29.5, 3005.0], [29.6, 3013.0], [29.7, 3014.0], [29.8, 3018.0], [29.9, 3025.0], [30.0, 3026.0], [30.1, 3026.0], [30.2, 3038.0], [30.3, 3040.0], [30.4, 3054.0], [30.5, 3067.0], [30.6, 3070.0], [30.7, 3071.0], [30.8, 3073.0], [30.9, 3077.0], [31.0, 3089.0], [31.1, 3094.0], [31.2, 3095.0], [31.3, 3100.0], [31.4, 3101.0], [31.5, 3102.0], [31.6, 3105.0], [31.7, 3108.0], [31.8, 3109.0], [31.9, 3122.0], [32.0, 3123.0], [32.1, 3126.0], [32.2, 3127.0], [32.3, 3128.0], [32.4, 3128.0], [32.5, 3136.0], [32.6, 3138.0], [32.7, 3139.0], [32.8, 3147.0], [32.9, 3150.0], [33.0, 3151.0], [33.1, 3153.0], [33.2, 3155.0], [33.3, 3173.0], [33.4, 3182.0], [33.5, 3185.0], [33.6, 3193.0], [33.7, 3199.0], [33.8, 3201.0], [33.9, 3202.0], [34.0, 3203.0], [34.1, 3205.0], [34.2, 3210.0], [34.3, 3218.0], [34.4, 3222.0], [34.5, 3223.0], [34.6, 3228.0], [34.7, 3233.0], [34.8, 3242.0], [34.9, 3247.0], [35.0, 3249.0], [35.1, 3252.0], [35.2, 3253.0], [35.3, 3269.0], [35.4, 3273.0], [35.5, 3285.0], [35.6, 3292.0], [35.7, 3295.0], [35.8, 3295.0], [35.9, 3296.0], [36.0, 3300.0], [36.1, 3310.0], [36.2, 3313.0], [36.3, 3317.0], [36.4, 3318.0], [36.5, 3340.0], [36.6, 3341.0], [36.7, 3341.0], [36.8, 3347.0], [36.9, 3347.0], [37.0, 3349.0], [37.1, 3352.0], [37.2, 3353.0], [37.3, 3357.0], [37.4, 3360.0], [37.5, 3362.0], [37.6, 3363.0], [37.7, 3368.0], [37.8, 3370.0], [37.9, 3373.0], [38.0, 3376.0], [38.1, 3379.0], [38.2, 3385.0], [38.3, 3385.0], [38.4, 3391.0], [38.5, 3393.0], [38.6, 3412.0], [38.7, 3414.0], [38.8, 3417.0], [38.9, 3433.0], [39.0, 3446.0], [39.1, 3450.0], [39.2, 3457.0], [39.3, 3464.0], [39.4, 3466.0], [39.5, 3472.0], [39.6, 3473.0], [39.7, 3485.0], [39.8, 3492.0], [39.9, 3502.0], [40.0, 3505.0], [40.1, 3506.0], [40.2, 3510.0], [40.3, 3512.0], [40.4, 3514.0], [40.5, 3526.0], [40.6, 3535.0], [40.7, 3539.0], [40.8, 3541.0], [40.9, 3542.0], [41.0, 3558.0], [41.1, 3562.0], [41.2, 3568.0], [41.3, 3600.0], [41.4, 3608.0], [41.5, 3615.0], [41.6, 3620.0], [41.7, 3622.0], [41.8, 3623.0], [41.9, 3625.0], [42.0, 3628.0], [42.1, 3637.0], [42.2, 3638.0], [42.3, 3647.0], [42.4, 3665.0], [42.5, 3668.0], [42.6, 3686.0], [42.7, 3688.0], [42.8, 3690.0], [42.9, 3696.0], [43.0, 3698.0], [43.1, 3700.0], [43.2, 3706.0], [43.3, 3713.0], [43.4, 3714.0], [43.5, 3716.0], [43.6, 3730.0], [43.7, 3730.0], [43.8, 3731.0], [43.9, 3733.0], [44.0, 3734.0], [44.1, 3734.0], [44.2, 3742.0], [44.3, 3749.0], [44.4, 3758.0], [44.5, 3762.0], [44.6, 3771.0], [44.7, 3773.0], [44.8, 3792.0], [44.9, 3793.0], [45.0, 3800.0], [45.1, 3808.0], [45.2, 3808.0], [45.3, 3821.0], [45.4, 3825.0], [45.5, 3838.0], [45.6, 3843.0], [45.7, 3846.0], [45.8, 3854.0], [45.9, 3867.0], [46.0, 3871.0], [46.1, 3875.0], [46.2, 3889.0], [46.3, 3889.0], [46.4, 3897.0], [46.5, 3929.0], [46.6, 3930.0], [46.7, 3943.0], [46.8, 3951.0], [46.9, 3955.0], [47.0, 3968.0], [47.1, 3974.0], [47.2, 3974.0], [47.3, 3978.0], [47.4, 3986.0], [47.5, 3987.0], [47.6, 3994.0], [47.7, 4000.0], [47.8, 4015.0], [47.9, 4027.0], [48.0, 4027.0], [48.1, 4027.0], [48.2, 4047.0], [48.3, 4048.0], [48.4, 4048.0], [48.5, 4054.0], [48.6, 4062.0], [48.7, 4074.0], [48.8, 4096.0], [48.9, 4099.0], [49.0, 4099.0], [49.1, 4099.0], [49.2, 4104.0], [49.3, 4106.0], [49.4, 4110.0], [49.5, 4115.0], [49.6, 4122.0], [49.7, 4122.0], [49.8, 4123.0], [49.9, 4132.0], [50.0, 4132.0], [50.1, 4133.0], [50.2, 4141.0], [50.3, 4142.0], [50.4, 4163.0], [50.5, 4168.0], [50.6, 4171.0], [50.7, 4175.0], [50.8, 4187.0], [50.9, 4218.0], [51.0, 4227.0], [51.1, 4234.0], [51.2, 4244.0], [51.3, 4247.0], [51.4, 4252.0], [51.5, 4266.0], [51.6, 4268.0], [51.7, 4268.0], [51.8, 4271.0], [51.9, 4277.0], [52.0, 4279.0], [52.1, 4279.0], [52.2, 4286.0], [52.3, 4287.0], [52.4, 4293.0], [52.5, 4296.0], [52.6, 4305.0], [52.7, 4323.0], [52.8, 4331.0], [52.9, 4333.0], [53.0, 4335.0], [53.1, 4335.0], [53.2, 4341.0], [53.3, 4351.0], [53.4, 4367.0], [53.5, 4373.0], [53.6, 4391.0], [53.7, 4406.0], [53.8, 4409.0], [53.9, 4420.0], [54.0, 4422.0], [54.1, 4447.0], [54.2, 4459.0], [54.3, 4464.0], [54.4, 4467.0], [54.5, 4474.0], [54.6, 4500.0], [54.7, 4516.0], [54.8, 4531.0], [54.9, 4535.0], [55.0, 4556.0], [55.1, 4565.0], [55.2, 4576.0], [55.3, 4582.0], [55.4, 4582.0], [55.5, 4590.0], [55.6, 4607.0], [55.7, 4626.0], [55.8, 4629.0], [55.9, 4632.0], [56.0, 4633.0], [56.1, 4638.0], [56.2, 4666.0], [56.3, 4700.0], [56.4, 4720.0], [56.5, 4729.0], [56.6, 4734.0], [56.7, 4756.0], [56.8, 4757.0], [56.9, 4767.0], [57.0, 4772.0], [57.1, 4791.0], [57.2, 4811.0], [57.3, 4826.0], [57.4, 4829.0], [57.5, 4840.0], [57.6, 4841.0], [57.7, 4862.0], [57.8, 4870.0], [57.9, 4900.0], [58.0, 4902.0], [58.1, 4908.0], [58.2, 4922.0], [58.3, 4928.0], [58.4, 4929.0], [58.5, 4986.0], [58.6, 4993.0], [58.7, 5006.0], [58.8, 5015.0], [58.9, 5026.0], [59.0, 5052.0], [59.1, 5058.0], [59.2, 5079.0], [59.3, 5085.0], [59.4, 5094.0], [59.5, 5105.0], [59.6, 5109.0], [59.7, 5129.0], [59.8, 5149.0], [59.9, 5150.0], [60.0, 5153.0], [60.1, 5157.0], [60.2, 5171.0], [60.3, 5171.0], [60.4, 5177.0], [60.5, 5193.0], [60.6, 5193.0], [60.7, 5194.0], [60.8, 5199.0], [60.9, 5202.0], [61.0, 5206.0], [61.1, 5207.0], [61.2, 5209.0], [61.3, 5216.0], [61.4, 5219.0], [61.5, 5222.0], [61.6, 5228.0], [61.7, 5231.0], [61.8, 5232.0], [61.9, 5233.0], [62.0, 5241.0], [62.1, 5241.0], [62.2, 5265.0], [62.3, 5268.0], [62.4, 5271.0], [62.5, 5275.0], [62.6, 5276.0], [62.7, 5276.0], [62.8, 5280.0], [62.9, 5284.0], [63.0, 5300.0], [63.1, 5300.0], [63.2, 5301.0], [63.3, 5313.0], [63.4, 5322.0], [63.5, 5322.0], [63.6, 5339.0], [63.7, 5343.0], [63.8, 5348.0], [63.9, 5356.0], [64.0, 5357.0], [64.1, 5365.0], [64.2, 5366.0], [64.3, 5371.0], [64.4, 5372.0], [64.5, 5388.0], [64.6, 5411.0], [64.7, 5412.0], [64.8, 5412.0], [64.9, 5422.0], [65.0, 5427.0], [65.1, 5435.0], [65.2, 5439.0], [65.3, 5450.0], [65.4, 5467.0], [65.5, 5470.0], [65.6, 5477.0], [65.7, 5485.0], [65.8, 5489.0], [65.9, 5492.0], [66.0, 5496.0], [66.1, 5500.0], [66.2, 5503.0], [66.3, 5505.0], [66.4, 5516.0], [66.5, 5516.0], [66.6, 5519.0], [66.7, 5524.0], [66.8, 5524.0], [66.9, 5526.0], [67.0, 5536.0], [67.1, 5544.0], [67.2, 5557.0], [67.3, 5559.0], [67.4, 5560.0], [67.5, 5564.0], [67.6, 5566.0], [67.7, 5571.0], [67.8, 5583.0], [67.9, 5584.0], [68.0, 5588.0], [68.1, 5601.0], [68.2, 5609.0], [68.3, 5611.0], [68.4, 5613.0], [68.5, 5613.0], [68.6, 5622.0], [68.7, 5622.0], [68.8, 5623.0], [68.9, 5624.0], [69.0, 5624.0], [69.1, 5624.0], [69.2, 5634.0], [69.3, 5635.0], [69.4, 5635.0], [69.5, 5641.0], [69.6, 5659.0], [69.7, 5681.0], [69.8, 5681.0], [69.9, 5693.0], [70.0, 5694.0], [70.1, 5698.0], [70.2, 5712.0], [70.3, 5714.0], [70.4, 5715.0], [70.5, 5728.0], [70.6, 5729.0], [70.7, 5737.0], [70.8, 5744.0], [70.9, 5744.0], [71.0, 5746.0], [71.1, 5751.0], [71.2, 5760.0], [71.3, 5765.0], [71.4, 5775.0], [71.5, 5775.0], [71.6, 5777.0], [71.7, 5785.0], [71.8, 5808.0], [71.9, 5811.0], [72.0, 5821.0], [72.1, 5831.0], [72.2, 5832.0], [72.3, 5839.0], [72.4, 5845.0], [72.5, 5852.0], [72.6, 5857.0], [72.7, 5863.0], [72.8, 5863.0], [72.9, 5866.0], [73.0, 5868.0], [73.1, 5896.0], [73.2, 5917.0], [73.3, 5927.0], [73.4, 5929.0], [73.5, 5966.0], [73.6, 5973.0], [73.7, 5984.0], [73.8, 5985.0], [73.9, 5994.0], [74.0, 6020.0], [74.1, 6038.0], [74.2, 6041.0], [74.3, 6061.0], [74.4, 6074.0], [74.5, 6080.0], [74.6, 6088.0], [74.7, 6125.0], [74.8, 6130.0], [74.9, 6131.0], [75.0, 6153.0], [75.1, 6168.0], [75.2, 6200.0], [75.3, 6203.0], [75.4, 6206.0], [75.5, 6207.0], [75.6, 6241.0], [75.7, 6244.0], [75.8, 6248.0], [75.9, 6288.0], [76.0, 6297.0], [76.1, 6307.0], [76.2, 6307.0], [76.3, 6315.0], [76.4, 6320.0], [76.5, 6326.0], [76.6, 6338.0], [76.7, 6350.0], [76.8, 6356.0], [76.9, 6387.0], [77.0, 6389.0], [77.1, 6397.0], [77.2, 6404.0], [77.3, 6417.0], [77.4, 6499.0], [77.5, 6516.0], [77.6, 6523.0], [77.7, 6528.0], [77.8, 6537.0], [77.9, 6553.0], [78.0, 6574.0], [78.1, 6575.0], [78.2, 6589.0], [78.3, 6601.0], [78.4, 6606.0], [78.5, 6616.0], [78.6, 6651.0], [78.7, 6658.0], [78.8, 6670.0], [78.9, 6674.0], [79.0, 6712.0], [79.1, 6713.0], [79.2, 6714.0], [79.3, 6724.0], [79.4, 6724.0], [79.5, 6739.0], [79.6, 6758.0], [79.7, 6763.0], [79.8, 6779.0], [79.9, 6793.0], [80.0, 6853.0], [80.1, 6875.0], [80.2, 6879.0], [80.3, 6935.0], [80.4, 6937.0], [80.5, 6954.0], [80.6, 6992.0], [80.7, 7015.0], [80.8, 7019.0], [80.9, 7019.0], [81.0, 7061.0], [81.1, 7097.0], [81.2, 7102.0], [81.3, 7112.0], [81.4, 7119.0], [81.5, 7131.0], [81.6, 7135.0], [81.7, 7148.0], [81.8, 7205.0], [81.9, 7228.0], [82.0, 7262.0], [82.1, 7278.0], [82.2, 7295.0], [82.3, 7324.0], [82.4, 7335.0], [82.5, 7342.0], [82.6, 7348.0], [82.7, 7362.0], [82.8, 7369.0], [82.9, 7372.0], [83.0, 7373.0], [83.1, 7374.0], [83.2, 7374.0], [83.3, 7376.0], [83.4, 7383.0], [83.5, 7383.0], [83.6, 7384.0], [83.7, 7389.0], [83.8, 7392.0], [83.9, 7398.0], [84.0, 7398.0], [84.1, 7423.0], [84.2, 7434.0], [84.3, 7435.0], [84.4, 7442.0], [84.5, 7454.0], [84.6, 7459.0], [84.7, 7461.0], [84.8, 7466.0], [84.9, 7467.0], [85.0, 7484.0], [85.1, 7491.0], [85.2, 7499.0], [85.3, 7505.0], [85.4, 7520.0], [85.5, 7569.0], [85.6, 7572.0], [85.7, 7578.0], [85.8, 7666.0], [85.9, 7668.0], [86.0, 7670.0], [86.1, 7689.0], [86.2, 7702.0], [86.3, 7707.0], [86.4, 7765.0], [86.5, 7766.0], [86.6, 7803.0], [86.7, 7807.0], [86.8, 7823.0], [86.9, 7848.0], [87.0, 7964.0], [87.1, 7970.0], [87.2, 7982.0], [87.3, 8058.0], [87.4, 8097.0], [87.5, 8104.0], [87.6, 8111.0], [87.7, 8128.0], [87.8, 8242.0], [87.9, 8274.0], [88.0, 8279.0], [88.1, 8294.0], [88.2, 8296.0], [88.3, 8326.0], [88.4, 8334.0], [88.5, 8363.0], [88.6, 8387.0], [88.7, 8391.0], [88.8, 8415.0], [88.9, 8457.0], [89.0, 8499.0], [89.1, 8584.0], [89.2, 8655.0], [89.3, 8671.0], [89.4, 8745.0], [89.5, 8817.0], [89.6, 8922.0], [89.7, 8951.0], [89.8, 8958.0], [89.9, 8971.0], [90.0, 9004.0], [90.1, 9115.0], [90.2, 9120.0], [90.3, 9146.0], [90.4, 9184.0], [90.5, 9193.0], [90.6, 9201.0], [90.7, 9275.0], [90.8, 9276.0], [90.9, 9303.0], [91.0, 9305.0], [91.1, 9350.0], [91.2, 9352.0], [91.3, 9353.0], [91.4, 9373.0], [91.5, 9440.0], [91.6, 9705.0], [91.7, 9755.0], [91.8, 9770.0], [91.9, 9878.0], [92.0, 9888.0], [92.1, 9888.0], [92.2, 9919.0], [92.3, 10038.0], [92.4, 10061.0], [92.5, 10065.0], [92.6, 10084.0], [92.7, 10094.0], [92.8, 10122.0], [92.9, 10179.0], [93.0, 10283.0], [93.1, 10301.0], [93.2, 10336.0], [93.3, 10439.0], [93.4, 10489.0], [93.5, 10491.0], [93.6, 10511.0], [93.7, 10524.0], [93.8, 10536.0], [93.9, 10574.0], [94.0, 10729.0], [94.1, 10842.0], [94.2, 10951.0], [94.3, 11166.0], [94.4, 11260.0], [94.5, 11406.0], [94.6, 11508.0], [94.7, 11609.0], [94.8, 11770.0], [94.9, 11820.0], [95.0, 11845.0], [95.1, 11912.0], [95.2, 11943.0], [95.3, 11962.0], [95.4, 12001.0], [95.5, 12002.0], [95.6, 12035.0], [95.7, 12058.0], [95.8, 12112.0], [95.9, 12619.0], [96.0, 12783.0], [96.1, 12888.0], [96.2, 14706.0], [96.3, 14789.0], [96.4, 15196.0], [96.5, 15384.0], [96.6, 15395.0], [96.7, 15397.0], [96.8, 15413.0], [96.9, 15421.0], [97.0, 15474.0], [97.1, 15497.0], [97.2, 15532.0], [97.3, 15590.0], [97.4, 15597.0], [97.5, 15709.0], [97.6, 15748.0], [97.7, 15776.0], [97.8, 15844.0], [97.9, 15919.0], [98.0, 15988.0], [98.1, 16243.0], [98.2, 16263.0], [98.3, 16303.0], [98.4, 17345.0], [98.5, 17353.0], [98.6, 17448.0], [98.7, 17453.0], [98.8, 18061.0], [98.9, 18482.0], [99.0, 26894.0], [99.1, 27007.0], [99.2, 27114.0], [99.3, 27183.0], [99.4, 27264.0], [99.5, 27451.0], [99.6, 27704.0], [99.7, 27873.0], [99.8, 27902.0], [99.9, 29363.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 26.0, "series": [{"data": [[500.0, 1.0], [600.0, 13.0], [700.0, 8.0], [800.0, 2.0], [900.0, 6.0], [1000.0, 13.0], [1100.0, 12.0], [1200.0, 20.0], [1300.0, 12.0], [1400.0, 5.0], [1500.0, 12.0], [1600.0, 7.0], [1700.0, 9.0], [1800.0, 17.0], [1900.0, 13.0], [2000.0, 16.0], [2100.0, 15.0], [2200.0, 20.0], [2300.0, 14.0], [2400.0, 11.0], [2500.0, 11.0], [2600.0, 9.0], [2700.0, 14.0], [2800.0, 14.0], [2900.0, 19.0], [3000.0, 19.0], [3100.0, 25.0], [3200.0, 22.0], [3300.0, 26.0], [3400.0, 13.0], [3500.0, 14.0], [3700.0, 19.0], [3600.0, 18.0], [3800.0, 15.0], [3900.0, 12.0], [4000.0, 15.0], [4200.0, 17.0], [4100.0, 17.0], [4300.0, 11.0], [4600.0, 7.0], [4400.0, 9.0], [4500.0, 10.0], [4700.0, 9.0], [4800.0, 7.0], [5100.0, 14.0], [4900.0, 8.0], [5000.0, 8.0], [5200.0, 21.0], [5300.0, 16.0], [5500.0, 20.0], [5600.0, 21.0], [5400.0, 15.0], [5800.0, 14.0], [5700.0, 16.0], [6000.0, 7.0], [5900.0, 8.0], [6100.0, 5.0], [6200.0, 9.0], [6300.0, 11.0], [6400.0, 4.0], [6500.0, 8.0], [6600.0, 7.0], [6800.0, 3.0], [6700.0, 10.0], [6900.0, 4.0], [7000.0, 5.0], [7100.0, 6.0], [7400.0, 12.0], [7300.0, 18.0], [7200.0, 5.0], [7600.0, 4.0], [7500.0, 5.0], [7800.0, 4.0], [7700.0, 4.0], [7900.0, 3.0], [8100.0, 3.0], [8000.0, 2.0], [8300.0, 5.0], [8200.0, 5.0], [8400.0, 3.0], [8600.0, 2.0], [8700.0, 1.0], [8500.0, 1.0], [9100.0, 5.0], [8900.0, 4.0], [8800.0, 1.0], [9200.0, 3.0], [9000.0, 1.0], [9300.0, 6.0], [9700.0, 3.0], [9400.0, 1.0], [10000.0, 5.0], [9800.0, 3.0], [10100.0, 2.0], [9900.0, 1.0], [10200.0, 1.0], [10400.0, 3.0], [10300.0, 2.0], [10500.0, 4.0], [10700.0, 1.0], [10900.0, 1.0], [11200.0, 1.0], [10800.0, 1.0], [11100.0, 1.0], [11600.0, 1.0], [11700.0, 1.0], [11500.0, 1.0], [11400.0, 1.0], [11800.0, 2.0], [11900.0, 3.0], [12000.0, 4.0], [12100.0, 1.0], [12600.0, 1.0], [12700.0, 1.0], [12800.0, 1.0], [14700.0, 2.0], [15300.0, 3.0], [15100.0, 1.0], [15700.0, 3.0], [15400.0, 4.0], [15500.0, 3.0], [15800.0, 1.0], [16300.0, 1.0], [16200.0, 2.0], [15900.0, 2.0], [17400.0, 2.0], [17300.0, 2.0], [18000.0, 1.0], [18400.0, 1.0], [27400.0, 1.0], [26800.0, 1.0], [27200.0, 1.0], [27000.0, 1.0], [27100.0, 2.0], [27800.0, 1.0], [27900.0, 1.0], [27700.0, 1.0], [29300.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 29300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 92.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 908.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 92.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 908.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.6, "minX": 1.61590512E12, "maxY": 438.8484848484852, "series": [{"data": [[1.61590512E12, 438.8484848484852], [1.61590518E12, 5.6]], "isOverall": false, "label": "REST COUNTRIES", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61590518E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 558.0, "minX": 1.0, "maxY": 29363.0, "series": [{"data": [[2.0, 27704.0], [3.0, 27114.0], [4.0, 27183.0], [6.0, 27454.5], [7.0, 27264.0], [8.0, 26894.0], [9.0, 27873.0], [10.0, 27451.0], [11.0, 18482.0], [12.0, 17353.0], [13.0, 17345.0], [14.0, 18061.0], [15.0, 17448.0], [16.0, 17453.0], [17.0, 15709.0], [18.0, 14706.0], [19.0, 15597.0], [20.0, 15988.0], [21.0, 15919.0], [22.0, 15196.0], [23.0, 15590.0], [24.0, 15844.0], [25.0, 16263.0], [26.0, 15532.0], [28.0, 15828.0], [29.0, 16303.0], [30.0, 15421.0], [33.0, 15397.0], [32.0, 15485.5], [35.0, 15384.0], [37.0, 11406.0], [36.0, 15571.5], [39.0, 14789.0], [38.0, 11166.0], [41.0, 12112.0], [40.0, 15776.0], [43.0, 12783.0], [42.0, 10489.0], [45.0, 10842.0], [44.0, 11508.0], [47.0, 11770.0], [46.0, 12619.0], [49.0, 11609.0], [48.0, 11912.0], [51.0, 10574.0], [50.0, 11820.0], [53.0, 12035.0], [52.0, 12888.0], [55.0, 12058.0], [54.0, 12001.0], [57.0, 12002.0], [56.0, 11962.0], [59.0, 11260.0], [58.0, 9276.0], [61.0, 11943.0], [60.0, 10729.0], [63.0, 8499.0], [62.0, 10511.0], [67.0, 10283.0], [66.0, 10122.0], [65.0, 11845.0], [64.0, 9705.0], [71.0, 10336.0], [70.0, 8958.0], [69.0, 8391.0], [68.0, 10951.0], [75.0, 10038.0], [74.0, 7461.0], [73.0, 9888.0], [72.0, 9004.0], [79.0, 6992.0], [78.0, 7384.0], [77.0, 9275.0], [76.0, 9919.0], [83.0, 10179.0], [82.0, 10084.0], [81.0, 9888.0], [80.0, 10536.0], [87.0, 10491.0], [86.0, 10524.0], [85.0, 7205.0], [84.0, 7499.0], [91.0, 9353.0], [90.0, 8294.0], [89.0, 9115.0], [88.0, 9440.0], [95.0, 8279.0], [94.0, 9303.0], [93.0, 6606.0], [92.0, 10301.0], [99.0, 10439.0], [98.0, 7803.0], [97.0, 7392.0], [96.0, 8922.0], [103.0, 7398.0], [102.0, 7276.5], [100.0, 8274.0], [107.0, 6930.0], [105.0, 8106.5], [111.0, 7454.0], [110.0, 6350.0], [109.0, 9373.0], [108.0, 6674.0], [115.0, 6724.0], [114.0, 7982.0], [113.0, 5984.0], [112.0, 7398.0], [119.0, 9146.0], [118.0, 6954.0], [117.0, 8387.5], [123.0, 9193.0], [122.0, 7342.0], [121.0, 9755.0], [120.0, 9770.0], [126.0, 9305.0], [125.0, 5866.0], [124.0, 7520.0], [135.0, 9878.0], [134.0, 6853.0], [133.0, 5544.0], [132.0, 9201.0], [131.0, 5557.0], [130.0, 5765.0], [129.0, 10094.0], [128.0, 7820.0], [143.0, 5681.0], [142.0, 7707.0], [141.0, 9184.0], [140.0, 10065.0], [139.0, 7385.333333333333], [136.0, 6537.0], [151.0, 6601.0], [150.0, 5564.0], [149.0, 5845.0], [148.0, 6207.0], [147.0, 7131.0], [146.0, 7702.0], [145.0, 8154.5], [159.0, 7666.0], [158.0, 7148.0], [157.0, 6131.0], [156.0, 7376.0], [155.0, 6074.0], [154.0, 7372.0], [153.0, 6574.0], [152.0, 5831.0], [167.0, 8584.0], [166.0, 8817.0], [165.0, 6026.0], [163.0, 7295.0], [162.0, 7228.0], [161.0, 6715.0], [175.0, 8671.0], [174.0, 6307.0], [173.0, 5863.0], [172.0, 6153.0], [171.0, 6130.0], [170.0, 7389.0], [169.0, 5714.0], [168.0, 9350.0], [183.0, 8363.0], [182.0, 8111.0], [181.0, 5832.0], [180.0, 8971.0], [179.0, 4993.0], [178.0, 5712.0], [177.0, 5439.0], [176.0, 8334.0], [191.0, 8457.0], [190.0, 7220.0], [188.0, 7578.0], [187.0, 7668.0], [186.0, 6320.0], [185.0, 8745.0], [184.0, 5694.0], [199.0, 5207.0], [198.0, 7484.0], [197.0, 5601.0], [196.0, 5241.0], [195.0, 5270.5], [193.0, 7348.0], [192.0, 6125.0], [207.0, 5536.0], [206.0, 8242.0], [205.0, 4335.0], [204.0, 6553.0], [203.0, 6651.0], [202.0, 6389.0], [201.0, 5496.0], [200.0, 7466.0], [215.0, 7383.0], [214.0, 5516.0], [213.0, 9120.0], [212.0, 5276.0], [211.0, 5199.0], [210.0, 5343.0], [209.0, 5105.0], [208.0, 5571.0], [223.0, 7081.0], [221.0, 7369.0], [220.0, 5588.0], [219.0, 4929.0], [218.0, 8326.0], [217.0, 8415.0], [216.0, 6061.0], [230.0, 6937.0], [229.0, 6168.0], [228.0, 5388.0], [227.0, 7362.0], [226.0, 7459.0], [225.0, 8104.0], [224.0, 8296.0], [239.0, 8097.0], [238.0, 6041.0], [237.0, 6670.0], [236.0, 5744.0], [235.0, 6714.0], [234.0, 8058.0], [233.0, 5624.0], [232.0, 7025.0], [247.0, 6200.0], [246.0, 7467.0], [245.0, 5412.0], [244.0, 7112.0], [243.0, 5821.0], [242.0, 5624.0], [241.0, 5268.0], [240.0, 5609.0], [255.0, 5775.0], [254.0, 4074.0], [253.0, 4902.0], [252.0, 4168.0], [251.0, 5348.0], [250.0, 4447.0], [249.0, 7061.0], [248.0, 5505.0], [271.0, 5547.333333333333], [268.0, 6763.0], [259.0, 5713.0], [257.0, 7374.0], [256.0, 5985.0], [267.0, 5171.0], [266.0, 5202.0], [265.0, 6338.0], [264.0, 4279.0], [263.0, 3897.0], [262.0, 6575.0], [261.0, 5917.0], [260.0, 5728.0], [275.0, 7324.0], [287.0, 6255.666666666667], [284.0, 4684.0], [282.0, 7491.0], [281.0, 5366.0], [280.0, 5188.0], [278.0, 5193.0], [277.0, 7097.0], [276.0, 7766.0], [274.0, 8387.0], [273.0, 6206.0], [272.0, 4756.0], [302.0, 3558.0], [303.0, 4474.0], [301.0, 4335.0], [300.0, 7435.0], [299.0, 3568.0], [298.0, 3875.0], [297.0, 5322.0], [296.0, 5560.0], [294.0, 6038.0], [289.0, 5194.0], [288.0, 6297.0], [293.0, 4771.666666666667], [292.0, 4171.0], [316.0, 5138.5], [319.0, 3800.0], [318.0, 3843.0], [317.0, 5624.0], [314.0, 5966.0], [311.0, 5659.0], [305.0, 6508.5], [307.0, 7374.0], [306.0, 4293.0], [310.0, 3625.0], [309.0, 4351.0], [308.0, 5477.0], [334.0, 3623.0], [323.0, 2443.5], [322.0, 5435.0], [321.0, 7278.0], [320.0, 5737.0], [327.0, 5744.0], [326.0, 5613.0], [325.0, 7569.0], [324.0, 4296.0], [330.0, 1157.0], [331.0, 1378.0], [332.0, 4555.75], [335.0, 5500.0], [333.0, 5412.0], [329.0, 7823.0], [328.0, 6387.0], [348.0, 4944.0], [350.0, 5372.0], [342.0, 2909.5], [351.0, 2674.0], [349.0, 7689.0], [346.0, 3317.0], [345.0, 5350.5], [343.0, 5611.0], [337.0, 7505.0], [336.0, 3600.0], [339.0, 4027.0], [338.0, 4638.0], [341.0, 4373.0], [340.0, 3417.0], [364.0, 4934.0], [366.0, 3385.0], [356.0, 1423.0], [367.0, 3201.0], [365.0, 3391.0], [362.0, 3943.0], [361.0, 5648.0], [359.0, 3961.25], [355.0, 7135.0], [354.0, 4187.0], [353.0, 3714.0], [352.0, 4582.0], [380.0, 3014.0], [369.0, 4797.333333333333], [371.0, 3128.0], [370.0, 3242.0], [373.0, 3244.666666666667], [372.0, 3665.0], [374.0, 3185.0], [375.0, 3722.0], [383.0, 2476.5714285714284], [379.0, 3292.0], [378.0, 3269.0], [377.0, 3126.0], [376.0, 6417.0], [397.0, 3730.0], [385.0, 3000.5], [386.0, 4576.0], [384.0, 2578.6666666666665], [391.0, 1961.0], [390.0, 3734.0], [389.0, 6658.0], [388.0, 5492.0], [399.0, 4585.5], [396.0, 3900.0], [387.0, 5693.0], [394.0, 6793.0], [393.0, 3013.0], [392.0, 5170.0], [415.0, 3083.5], [402.0, 3189.5], [407.0, 2484.0], [401.0, 3369.5], [408.0, 2706.5], [406.0, 3730.666666666667], [405.0, 6712.0], [404.0, 4729.0], [409.0, 1991.0], [410.0, 4305.5], [411.0, 5519.0], [414.0, 6779.0], [413.0, 5622.0], [412.0, 6203.0], [403.0, 5058.0], [431.0, 5015.0], [427.0, 4083.0], [430.0, 4079.5], [428.0, 3974.0], [426.0, 5973.0], [425.0, 2868.0], [424.0, 6326.0], [423.0, 3608.0], [417.0, 5450.0], [416.0, 3700.0], [419.0, 3526.0], [418.0, 4406.0], [422.0, 6470.0], [421.0, 3153.0], [420.0, 5929.0], [446.0, 2657.5], [444.0, 4139.0], [447.0, 5746.0], [445.0, 5489.0], [443.0, 5153.0], [442.0, 5566.0], [441.0, 5157.0], [440.0, 3727.0], [438.0, 4900.0], [433.0, 4175.0], [432.0, 6315.0], [435.0, 4268.0], [434.0, 6713.0], [437.0, 5516.0], [436.0, 3466.0], [450.0, 2421.0], [453.0, 2449.25], [456.0, 4046.333333333333], [458.0, 2839.75], [461.0, 3290.3333333333335], [462.0, 3199.0], [459.0, 4252.0], [455.0, 5551.5], [449.0, 3109.0], [448.0, 3647.0], [452.0, 4312.0], [466.0, 2436.5], [469.0, 1414.0], [468.0, 4467.0], [473.0, 802.0], [472.0, 1303.0], [476.0, 3698.0], [467.0, 4826.0], [475.0, 6307.0], [474.0, 4921.0], [471.0, 2736.0], [465.0, 5587.0], [464.0, 4757.0], [470.0, 3171.5], [483.0, 3514.0], [495.0, 2081.5], [480.0, 2404.0], [491.0, 2742.666666666667], [494.0, 4086.6666666666665], [490.0, 4811.0], [489.0, 3433.0], [486.0, 3295.0], [485.0, 3154.0], [482.0, 5698.0], [481.0, 4733.8], [509.0, 2532.5], [497.0, 3143.75], [506.0, 3117.5], [510.0, 3213.0], [508.0, 6875.0], [499.0, 5365.0], [498.0, 4791.0], [507.0, 7019.0], [505.0, 4746.0], [503.0, 5231.0], [502.0, 5280.0], [501.0, 2860.0], [500.0, 4870.0], [540.0, 2750.0], [515.0, 3618.0], [518.0, 2370.0], [517.0, 5206.0], [516.0, 3089.0], [520.0, 3498.0], [522.0, 3687.0], [519.0, 2619.8], [524.0, 2802.6666666666665], [525.0, 2620.3333333333335], [526.0, 3074.0], [527.0, 5524.0], [512.0, 3649.0], [514.0, 2778.0], [513.0, 4266.0], [533.0, 2335.0], [532.0, 2202.0], [531.0, 4106.0], [530.0, 2737.0], [529.0, 5357.0], [528.0, 4104.0], [535.0, 2673.0], [534.0, 3340.0], [543.0, 4277.0], [541.0, 2921.0], [539.0, 5584.0], [538.0, 3353.0], [537.0, 3986.0], [536.0, 3067.0], [568.0, 2622.25], [555.0, 2323.3333333333335], [554.0, 3341.0], [553.0, 5049.0], [556.0, 2744.6666666666665], [557.0, 3715.5], [559.0, 3472.0], [545.0, 5300.0], [544.0, 5367.5], [547.0, 2239.0], [546.0, 1970.0], [549.0, 5470.0], [548.0, 1968.0], [551.0, 2892.0], [550.0, 2092.0], [558.0, 5275.0], [567.0, 2837.6], [566.0, 5583.0], [565.0, 4633.0], [564.0, 3231.0], [563.0, 2178.0], [561.0, 3773.0], [560.0, 2764.0], [570.0, 1392.5], [569.0, 5427.0], [571.0, 3002.0], [572.0, 1789.0], [575.0, 2220.3333333333335], [573.0, 1026.5], [574.0, 3415.25], [583.0, 2677.5], [580.0, 4217.0], [579.0, 3037.5], [591.0, 2511.0], [577.0, 2276.0], [576.0, 4420.0], [578.0, 5356.0], [581.0, 1455.0], [584.0, 2328.5], [585.0, 1966.0], [587.0, 3638.0], [586.0, 2989.0], [589.0, 2958.0], [588.0, 5503.0], [590.0, 2370.0], [593.0, 4190.5], [602.0, 2377.0], [603.0, 3356.6666666666665], [605.0, 5094.0], [604.0, 5808.0], [606.0, 3142.0], [607.0, 3559.5], [592.0, 5751.0], [601.0, 2785.0], [594.0, 2290.5], [596.0, 2597.75], [598.0, 2987.0], [597.0, 2448.0], [595.0, 2586.0], [612.0, 1706.5], [614.0, 3765.0], [613.0, 2431.6666666666665], [616.0, 2362.0], [615.0, 3177.5], [617.0, 2904.0], [619.0, 3413.5], [618.0, 3011.0], [621.0, 4274.5], [623.0, 2472.0], [610.0, 4022.0], [608.0, 3300.0], [622.0, 4027.0], [627.0, 1614.5], [626.0, 4734.0], [625.0, 4862.0], [624.0, 5219.0], [628.0, 3094.0], [639.0, 4306.5], [638.0, 3742.0], [637.0, 2808.0], [636.0, 1502.0], [635.0, 2089.0], [634.0, 4115.0], [633.0, 4279.0], [632.0, 3018.0], [629.0, 3160.0], [631.0, 3503.0], [630.0, 5467.0], [641.0, 2153.5], [640.0, 4148.5], [644.0, 2732.3333333333335], [643.0, 2277.0], [642.0, 4422.0], [645.0, 1857.0], [646.0, 2817.0], [652.0, 3114.0], [651.0, 1257.0], [650.0, 3560.5], [648.0, 2379.0], [655.0, 3276.6666666666665], [654.0, 2721.5], [653.0, 2493.142857142857], [658.0, 3017.5], [660.0, 3490.0], [659.0, 5371.0], [661.0, 2226.0], [663.0, 5300.0], [662.0, 2342.0], [657.0, 4495.5], [656.0, 5209.0], [665.0, 4080.0], [667.0, 4556.0], [666.0, 2545.0], [670.0, 2494.0], [669.0, 2307.0], [671.0, 1553.0], [702.0, 3300.0], [685.0, 1916.375], [682.0, 2962.75], [686.0, 2899.3333333333335], [687.0, 4712.0], [678.0, 2657.0], [677.0, 1339.0], [676.0, 2456.0], [675.0, 4333.0], [674.0, 3267.0], [672.0, 4062.0], [696.0, 3767.5], [703.0, 2050.0], [699.0, 4700.0], [698.0, 2190.0], [697.0, 1180.0], [684.0, 2163.0], [683.0, 3759.6], [681.0, 2449.5], [680.0, 2226.0], [688.0, 3093.5], [689.0, 2265.5], [691.0, 2028.5], [692.0, 3705.5], [694.0, 3458.6666666666665], [695.0, 4251.666666666667], [693.0, 3443.3333333333335], [690.0, 1863.5], [706.0, 2587.333333333333], [707.0, 2225.0], [709.0, 1206.0], [708.0, 1201.0], [705.0, 3504.6666666666665], [704.0, 5026.0], [710.0, 2733.5], [713.0, 3629.0], [712.0, 2475.0], [714.0, 1527.0], [716.0, 2121.0], [715.0, 4110.0], [717.0, 2932.0], [719.0, 1699.5], [720.0, 2587.0], [723.0, 5560.0], [722.0, 1395.0], [721.0, 1287.0], [735.0, 5177.0], [732.0, 2610.75], [731.0, 4464.0], [730.0, 3762.0], [729.0, 1075.0], [728.0, 3821.0], [711.0, 2273.0], [733.0, 938.0], [734.0, 3018.0], [725.0, 2156.5], [727.0, 632.0], [726.0, 3147.0], [724.0, 2772.0], [718.0, 3356.75], [741.0, 1778.25], [745.0, 3190.5], [744.0, 1615.0], [746.0, 2149.0], [747.0, 1315.5], [749.0, 1429.0], [748.0, 3987.0], [751.0, 3273.0], [736.0, 1029.0], [738.0, 4626.0], [737.0, 925.0], [750.0, 3295.0], [755.0, 1884.0], [754.0, 1110.0], [753.0, 1455.0], [752.0, 3202.0], [757.0, 3510.0], [756.0, 2385.5], [759.0, 2735.0], [758.0, 2314.0], [763.0, 2220.333333333333], [762.0, 2032.0], [761.0, 4008.6666666666665], [760.0, 3688.0], [743.0, 2138.0], [742.0, 558.0], [765.0, 1733.5], [764.0, 4268.0], [766.0, 1544.0], [772.0, 958.5], [775.0, 3103.75], [774.0, 1913.5], [778.0, 2457.0], [776.0, 2538.5], [779.0, 3228.0], [769.0, 1380.0], [768.0, 1236.5], [777.0, 4227.0], [773.0, 3218.0], [771.0, 4331.0], [770.0, 1611.0], [1.0, 29363.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[434.5160000000003, 5049.042999999997]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 779.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 23.5, "minX": 1.61590512E12, "maxY": 35256.416666666664, "series": [{"data": [[1.61590512E12, 35256.416666666664], [1.61590518E12, 356.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61590512E12, 2326.5], [1.61590518E12, 23.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61590518E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4821.503030303028, "minX": 1.61590512E12, "maxY": 27575.5, "series": [{"data": [[1.61590512E12, 4821.503030303028], [1.61590518E12, 27575.5]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61590518E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4531.551515151513, "minX": 1.61590512E12, "maxY": 27421.799999999996, "series": [{"data": [[1.61590512E12, 4531.551515151513], [1.61590518E12, 27421.799999999996]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61590518E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 571.6, "minX": 1.61590512E12, "maxY": 2016.4707070707084, "series": [{"data": [[1.61590512E12, 2016.4707070707084], [1.61590518E12, 571.6]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61590518E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 558.0, "minX": 1.61590512E12, "maxY": 29363.0, "series": [{"data": [[1.61590512E12, 18482.0], [1.61590518E12, 29363.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61590512E12, 8575.499999999998], [1.61590518E12, 29216.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61590512E12, 16010.950000000008], [1.61590518E12, 29363.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61590512E12, 10779.849999999993], [1.61590518E12, 29363.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61590512E12, 558.0], [1.61590518E12, 26894.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61590512E12, 4118.5], [1.61590518E12, 27357.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61590518E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1548.0, "minX": 1.0, "maxY": 29363.0, "series": [{"data": [[139.0, 3376.0], [145.0, 5611.0], [155.0, 4266.0], [3.0, 18061.0], [52.0, 2076.0], [53.0, 7373.0], [13.0, 11912.0], [14.0, 10202.5], [15.0, 15497.0], [66.0, 6354.5], [4.0, 13450.5], [1.0, 29363.0], [73.0, 2717.0], [5.0, 11508.0], [21.0, 1548.0], [88.0, 2347.0], [6.0, 21497.5], [108.0, 2731.0], [27.0, 9275.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 155.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1377.0, "minX": 1.0, "maxY": 27848.0, "series": [{"data": [[139.0, 3102.0], [145.0, 5410.0], [155.0, 4123.0], [3.0, 17762.0], [52.0, 1911.5], [53.0, 7373.0], [13.0, 11907.0], [14.0, 10030.0], [15.0, 15495.0], [66.0, 6065.0], [4.0, 13309.0], [1.0, 27848.0], [73.0, 2328.0], [5.0, 10842.0], [21.0, 1377.0], [88.0, 1969.5], [6.0, 21460.0], [108.0, 2461.5], [27.0, 9115.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 155.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.61590512E12, "maxY": 16.666666666666668, "series": [{"data": [[1.61590512E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61590512E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.61590512E12, "maxY": 16.5, "series": [{"data": [[1.61590512E12, 16.5], [1.61590518E12, 0.16666666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61590518E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.61590512E12, "maxY": 16.5, "series": [{"data": [[1.61590512E12, 16.5], [1.61590518E12, 0.16666666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61590518E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.61590512E12, "maxY": 16.5, "series": [{"data": [[1.61590512E12, 16.5], [1.61590518E12, 0.16666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61590518E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

